# Message 邮件类的关系
# +- MIMEBase
#    +- MIMEMultipart
#    +- MIMENonMultipart
#       +- MIMEMessage
#       +- MIMEText
#       +- MIMEImage


import poplib  #把文件下载到本地
# import email    #把下载的文件解析为可读的格式
from email.parser import Parser
from email.header import decode_header
from email.utils import parseaddr


# indent 用于缩进显示

def guess_charset(msg):
    charset = msg.get_charset()
    if charset is None:
        content_type = msg.get('Content-Type','').lower()
        pos = content_type.find('charset=')
        if pos >=0:
            charset = content_type[pos + 8:].strip()
    return charset
def decode_str(s):
    value,charset = decode_header(s)[0]
    if charset:
        value = value.decode(charset)
    return value

def print_info(msg,indent=0):
    if indent == 0:     #==表示的value是不是相等  is表示的是不是指向同一个位置就是同一个id
        for header in ['From','To','Subject']:
            value = msg.get(header,'')
            if value:
                if header == 'Subject':   #标题
                    value = decode_str(value)
                else:                     #邮箱地址
                    hdr,addr = parseaddr(value)
                    name = decode_str(hdr)
                    value = u'%s <%s>'%(name,addr)      #后边的字符按照unicode的格式编码
            print('%s%s:%s'%(' '*indent,header,value))
    if (msg.is_multipart()):  #判断是不是多层嵌套如果是多个元素组成的列表，则返回true
        parts = msg.get_payload()
        for n,part in enumerate(parts):
            print('%spart%s'%(' '*indent,n))
            print('%s--------'%(' '*indent))
            print_info(part,indent+1)
    else:
        content_type = msg.get_content_type()
        if content_type == 'text/plain' or content_type == 'text/html':
            content = msg.get_payload(decode=True)
            charset = guess_charset(msg)
            if charset:
                content = content.decode(charset)
            print('%sText: %s'%(' '*indent,content+'...'))
        else:
            print('%s Attachment: %s'%(' '*indent,content_type))

#输入邮件地址  口令和pop3的服务器地址
email_user = '邮箱地址@163.com' #input('Email:')
password = '邮箱授权码'  #input('Password:')
pop3_server = 'pop.163.com'

#连接到pop3服务器
server = poplib.POP3(pop3_server)
#可以打开或关闭调试信息
server.set_debuglevel(1)
#可选择打印pop3服务器的欢迎文字
print(server.getwelcome().decode('utf-8'))

#用户验证
server.user(email_user)
server.pass_(password)

#stat返回邮件的数量和占用的空间
print('Message:%s.size:%s.'%server.stat())

#list()返回所有的邮件编号
resp,mails,octets = server.list()   #分别表示的意思；是响应信息  所有邮件的简要信息   返回数据的大小

#可以查看返回的列表像[b'1 34324',b'2 542365']这种格式有邮件号
print(mails)
#获取最新的一封邮件 索引号从1开始
index = len(mails)
# 默认下标越大表示邮件越新 要获取所有邮件的时候就可以用while循环获取所有的邮件
resp,lines,octets = server.retr(index)  #分别代表 邮件获取状态，原始邮件数据，邮件大小
#lines存储了原始文本的每一行内容
#获取整个邮件的原始文本
# print(type(lines))
msg_content = b'\r\n'.join(lines).decode('utf-8')
# print(type(msg_content))
#解析邮件把邮件变成Message对象 但是这个message对象可能是一个MIMEMultipart对象
#就是包含MIMEBase对象  就是附件用到的还不知是一层
msg = Parser().parsestr(msg_content)   #从字符串创佳绩一个message的结构

#递归的打印出Meaasge对象的层次结构
print_info(msg)

#可以根据索引号直接从服务器删除邮件
# server.dele(index)
server.quit() #关闭连接





